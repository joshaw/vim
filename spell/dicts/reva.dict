<
<<
<>
=
>
>>
-
;
;;
!
/
'
(.)
[']
@
*
*/
+
+!
1-
1+
2!
2@
2cell-
2cell+
2drop
2dup
2nip
2over
2rot
2swap
3cell+
3drop
4cell+
abs
again
align
aligned
allocate
allot
and
<args>
base
binary
bugbug
bugbug:
c!
c@
catch
cell
cell-
cell+
cells
char+
CHAR
chars
compile
constant
constant,
context:
CR
create
d-
d+
dabs
decimal
defer
defer!
defer@
>digit
digit>
dmax
dmin
dnegate
do
does>
>double
drop
dump
dup
?dup
else
EMIT
EXPECT
fill
FIND
fixme
>float
fm/mod
forth
free
here
hex
i
if
<if
<>if
=if
>if
if0
immediate
inline
;inline
invert
is
j
KEY
KEY?
keyword
keywords
leave
literal
loop
m*
m*/
m+
macro
max
min
mod
/mod
*/mod
more
move
negate
nip
non-FORTH
not
note:
>number
octal
or
over
pick
>r
r>
r@
rdrop
repeat
resize
revaBuiltin
revaCharOps
revastack
roll
rot
-rot
rp!
rp@
.s
s>d
see
>single
skip
sm/rem
sp!
sp@
swap
syn
then
throw
TIB
to
+to
todo
todo:
-TRAILING
tuck
TYPE
u<
um*
umax
umin
um/mod
unloop
until
user
value
variable
variable,
while
WORD
xor
